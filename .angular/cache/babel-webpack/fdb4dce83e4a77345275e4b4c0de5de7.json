{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { take } from 'rxjs';\nimport { environment } from '../../environments/environment.prod';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let WeaponService = /*#__PURE__*/(() => {\n  class WeaponService {\n    constructor(http) {\n      this.http = http;\n      this.greenAlert = '';\n      this.isLoading = false;\n    }\n\n    getSelectedSkinsImages(type) {\n      return new Promise(resolve => {\n        let headers = new HttpHeaders();\n        headers.append('Content-Type', 'application/json');\n        headers.append('Access-Control-Allow-Origin', '*');\n        this.http.get(environment.localHost + \"/api/skinchangerbyid/\" + localStorage.getItem(\"id\") + \"/\" + type, {\n          headers\n        }).pipe(take(1)).subscribe(data => {\n          this.selectedSkinsImgs = data;\n          console.dir(data);\n          resolve(this.selectedSkinsImgs);\n        });\n      });\n    }\n\n    loadWeaponData(weapon) {\n      return new Promise(resolve => {\n        let headers = new HttpHeaders();\n        headers.append('Content-Type', 'application/json');\n        headers.append('Access-Control-Allow-Origin', '*');\n        let params = new HttpParams();\n        params.append(\"weapon\", weapon);\n        this.http.get(environment.localHost + \"/api/skins?Weapon=\" + weapon, {\n          headers\n        }).pipe(take(1)).subscribe(data => {\n          this.weapons = data;\n          this.weapons.forEach(x => {\n            x.skin.img = \"data:image/png;base64,\" + x.skin.image;\n          });\n          resolve(this.weapons);\n        });\n      });\n    }\n\n    selectWeaponSkin(_weapon, _skinid) {\n      return new Promise(resolve => {\n        this.http.post(environment.localHost + \"/api/skins\", {\n          id: localStorage.getItem(\"id\"),\n          weapon: _weapon,\n          skinId: _skinid\n        }, {\n          observe: 'response'\n        }).subscribe(x => {\n          resolve(x.status);\n        });\n      });\n    }\n\n    UpdateAlert(resCode) {\n      if (resCode == 200) {\n        this.greenAlert = \"Successfully updated your skin.\";\n        setTimeout(() => {\n          this.greenAlert = \"\";\n        }, 2500);\n      }\n    }\n\n  }\n\n  WeaponService.ɵfac = function WeaponService_Factory(t) {\n    return new (t || WeaponService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  WeaponService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WeaponService,\n    factory: WeaponService.ɵfac,\n    providedIn: 'root'\n  });\n  return WeaponService;\n})();","map":null,"metadata":{},"sourceType":"module"}